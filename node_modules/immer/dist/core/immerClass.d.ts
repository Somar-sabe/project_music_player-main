import { IProduceWithPatches, IProduce, ImmerState, Drafted, Patch, Objectish, Draft, PatchListener } from "../internal";
interface ProducersFns {
    produce: IProduce;
    produceWithPatches: IProduceWithPatches;
}
export declare class Immer implements ProducersFns {
    useProxies_: boolean;
    autoFreeze_: boolean;
    constructor(config?: {
        useProxies?: boolean;
        autoFreeze?: boolean;
    });
    /**
     * The `produce` function takes a value and a "recipe function" (whose
     * return value often depends on the base state). The recipe function is
     * free to mutate its first argument however it wants. All mutations are
     * 